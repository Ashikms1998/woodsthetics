const {logDetails} = require('../model/userModel');
const bcrypt =require('bcrypt');
const {categoryCollection} = require('../model/categoryDB');
const {productCollection} = require('../model/productDB')
const multer = require('../controller/userController');
const { LogError } = require('concurrently');
const { log } = require('console');

exports.loginGet = (req,res)=>{
    if(req.session.adminID){
        res.render('admin/adminhome')
    }else{
       
        res.render('admin/adminlogin')
    }
};




exports.userGet = async (req,res)=>{
    const admin = await logDetails.find()
    res.render('admin/usermanagement',{admin})
  }





exports.categoryGet = async (req,res)=>{
    const Categorydata=await categoryCollection.find()
    res.render('admin/categorymanagement',{Categorydata})

}





exports.productmanagementGet =async (req,res)=>{
    const productdata=await productCollection.find()
    console.log(productdata);
res.render('admin/productmanagement',{productdata})
}

exports.editproductGet =async (req,res)=>{
    const productid = req.params._id
    console.log("ethu produt",productid);
const productdata = await productCollection.findById(productid) 
console.log("aasdfghj",productdata);
    res.render('admin/editproduct',{productdata});
}



exports.addproductGet = (req,res)=>{
    
    res.render('admin/addproduct')
}




exports.productadd = async (req,res)=>{
try {
     const newproduct = new productCollection({
        productname: req.body.productname,
        description: req.body.description,
        category:req.body.category,
        price:req.body.price,
        quantity:req.body.quantity,
        brand:req.body.brand 

    })
    await newproduct.save()
res.redirect('/productmanagement')
} catch (error) {
console.log("UPDATING PRODUCT ERROR:",error);
}
  
};



//post

const admindata = {
    adminName: "Ashik",
    passcode: 123
};


exports.loginPost = (req,res)=>{
    const {username,password} = req.body
    if(admindata.adminName == username && admindata.passcode==password){
        req.session.adminID = true;
        res.redirect('/adminhome');
    }else{
        res.render("admin/adminlogin",{wrg:"wrong credentials"})
    }
} 

// addcategory

exports.addcategoryPost = async(req,res)=>{

    try{
    const Categorydata  = new categoryCollection ({
        categoryname: req.body.category,
        description: req.body.description,
        blockStatus: false
    })
  
    await Categorydata.save();
    res.redirect('/categorymanagement')
}catch(error) {
    console.log("UPDATING CATEGORY ERROR:",error);
}

};


exports.editproductPost = async(req,res)=>{

try{
        const editproductdata = req.params._id
        console.log("ethu produt",editproductdata);
        const updatedproductdata = await productCollection.updateOne(editproductdata) 
        console.log("aasdfghj",updatedproductdata);
        res.redirect('/editproduct',{updatedproductdata});
} catch (error) {
    console.error("Error Editing product:", error);
    // Handle errors appropriately, perhaps render an error page or redirect to another page
    res.status(500).send("Internal Server Error");
}
};


//blockuser

exports.blockUser = async(req,res)=>{
    try {
        console.log("hrrrr");
        const userId = req.query.id;
        console.log(userId);
        const user = await logDetails.findOne(userId);
        console.log("wejg erwjgt".user);
        if(!user){
            return res.status(404).send('User not found');
        }
        user.blocked = !user.blocked;
        await user.save();
        console.log('User updated:', user);
        res.redirect("/usermanagement");

    } catch (error) {
        console.log("Error:",error);
        res.status(500).send('Internal Server Error');
    }
};